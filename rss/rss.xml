<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>My Blog</title>
    <link>http://localhost:5173</link>
    <description>This is my personal blog</description>
    <managingEditor>example@example.example (Haruki Nakajima)</managingEditor>
    <pubDate>Tue, 31 Dec 2024 04:09:46 +0000</pubDate>
    <item>
      <title>ブログ始めました！</title>
      <link>http://localhost:5173/article/084061e6-c090-4bdb-a3bf-46987d6c154b</link>
      <description>年内に公開するという目標はギリギリ達成。&#xA;気が向いたときにブログを追加していきたい。&#xA;&#xA;「個人サイト作ったらどんどん直したくなる」と言っている先人の気持ちがやっと理解してきた。&#xA;&#xA;## 公開済みブログ記事&#xA;https://www.luftalian.com/article/0213b9b5-4d2f-451e-9f27-94202d1b4add&#xA;[![Screenshot from 2024-12-31 12-56-47.png](https://blog-background.trap.show/uploads/images/35a9902f-c0db-4259-b0a8-7400fd04529d.png)](https://www.luftalian.com/article/0213b9b5-4d2f-451e-9f27-94202d1b4add)&#xA;&#xA;## 自己紹介&#xA;https://www.luftalian.com/about&#xA;[![Screenshot from 2024-12-29 03-22-11.png](https://blog-background.trap.show/uploads/images/246a6df3-312e-4a2d-b216-03727a1c9731.png)](https://www.luftalian.com/about)&#xA;</description>
      <author>Haruki Nakajima</author>
      <guid>084061e6-c090-4bdb-a3bf-46987d6c154b</guid>
      <pubDate>Tue, 31 Dec 2024 04:00:15 +0000</pubDate>
    </item>
    <item>
      <title>asd</title>
      <link>http://localhost:5173/article/72b93db9-3522-4058-adc5-686ee9e87a15</link>
      <description>以下では、Vue3 + Vite + Vercel + SPA (シングルページアプリケーション) で OGP を実装する簡単な手順について解説します。  &#xA;また、OGP の動作確認に便利な [OpenGraph.xyz](https://www.opengraph.xyz/) もあわせて紹介します。  &#xA;「SNS にシェアした時、ページごとに違う画像やタイトルを表示したい」という場合の参考になれば幸いです。&#xA;&#xA;---&#xA;&#xA;# なぜ SPA で OGP が難しいのか？&#xA;&#xA;通常、SPA で作られたページは「クライアントサイド (ブラウザ) の JavaScript」によって動的にレンダリングされます。  &#xA;しかし、Twitter や Facebook 等の SNS クローラーは JavaScript を実行しないため、**サーバーサイドで返却される HTML** 内に OGP タグが含まれていないと、リンクプレビューを正しく表示してくれません。  &#xA;&#xA;---&#xA;&#xA;# OGP (Open Graph Protocol) とは？&#xA;&#xA;- Facebook が提唱しているメタデータ規格  &#xA;- HTML の `&lt;head&gt;` 部分に以下のようなタグを埋め込むことで、SNS でのプレビュー情報を指定できる  &#xA;  ```html&#xA;  &lt;meta property=&#34;og:title&#34; content=&#34;ページタイトル&#34; /&gt;&#xA;  &lt;meta property=&#34;og:description&#34; content=&#34;説明文&#34; /&gt;&#xA;  &lt;meta property=&#34;og:image&#34; content=&#34;プレビュー画像URL&#34; /&gt;&#xA;  &lt;meta property=&#34;og:url&#34; content=&#34;ページURL&#34; /&gt;&#xA;  ```&#xA;- OGP タグを適切に設定することで、SNS でシェアした際に表示される**タイトル・サムネイル画像・説明文**などを自由にコントロールできる&#xA;&#xA;---&#xA;&#xA;# [OpenGraph.xyz](https://www.opengraph.xyz/) とは？&#xA;&#xA;**OpenGraph.xyz** は、URL を入力するとそのページの OGP 情報を解析・プレビュー表示してくれるオンラインサービスです。  &#xA;&#xA;- OGP タグの有無や設定値を確認できる  &#xA;- 実際のリンクプレビューをシミュレーション可能  &#xA;- もし OGP タグがない / 不完全な場合はエラーを示してくれる&#xA;&#xA;SNS クローラーと同じように JavaScript を実行しないため、SPA の OGP 設定が正しく動いているかを確かめるには最適なツールです。&#xA;&#xA;---&#xA;&#xA;# 簡単な実装例&#xA;&#xA;ここでは **Vercel** の Serverless Functions (通称 Vercel Functions) を使った方法を紹介します。  &#xA;- `vercel.json` で特定のパスを Serverless Function にリダイレクト (Rewrite)  &#xA;- Serverless Function 側でバックエンド API から記事データを取得し、`index.html` に OGP メタタグを挿入して返却する仕組み&#xA;&#xA;## 1. `vercel.json` の設定&#xA;&#xA;```jsonc&#xA;{&#xA;  &#34;rewrites&#34;: [&#xA;    {&#xA;      &#34;source&#34;: &#34;/article/:id&#34;,&#xA;      &#34;destination&#34;: &#34;/api/og-article/[id]?id=:id&#34;&#xA;    },&#xA;    {&#xA;      &#34;source&#34;: &#34;/(.*)&#34;,&#xA;      &#34;destination&#34;: &#34;/&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;```&#xA;&#xA;- `source` で指定した `/article/:id` へのアクセスを、`/api/og-article/[id]?id=:id` へ振り替え  &#xA;- それ以外のパスはすべてルート (`/`) に返す想定  &#xA;&#xA;## 2. `api/og-article/[id].js` でバックエンドからデータを取得&#xA;&#xA;```js&#xA;import fs from &#39;fs&#39;;&#xA;import path from &#39;path&#39;;&#xA;import axios from &#39;axios&#39;;&#xA;&#xA;const BACKEND_API_URL = &#39;https://example.com/api/v1/articles&#39;;&#xA;&#xA;export default async (req, res) =&gt; {&#xA;  const { id } = req.query;&#xA;&#xA;  // id がなければエラー&#xA;  if (!id) {&#xA;    res.statusCode = 400;&#xA;    return res.end(&#39;Article ID is required&#39;);&#xA;  }&#xA;&#xA;  // --- バックエンドから記事データを取得 ---&#xA;  let articleData;&#xA;  try {&#xA;    const response = await axios.get(`${BACKEND_API_URL}/${id}`);&#xA;    articleData = response.data;&#xA;  } catch (error) {&#xA;    console.error(&#39;Failed to fetch article:&#39;, error.message);&#xA;    // 失敗時は普通に index.html を返して終わり&#xA;    const fallbackIndexPath = path.join(process.cwd(), &#39;dist&#39;, &#39;index.html&#39;);&#xA;    const fallbackHtml = fs.readFileSync(fallbackIndexPath, &#39;utf8&#39;);&#xA;    res.status(200).send(fallbackHtml);&#xA;    return;&#xA;  }&#xA;&#xA;  // --- OGP 用の値を取り出し ---&#xA;  const title = articleData.title || &#39;Default Title&#39;;&#xA;  const description = articleData.description || &#39;Default Description&#39;;&#xA;  const image = articleData.imageUrl || &#39;https://example.com/default.jpg&#39;;&#xA;  const url = `https://your-domain.com/article/${id}`;&#xA;&#xA;  // dist 配下の index.html を読み込み&#xA;  const indexPath = path.join(process.cwd(), &#39;dist&#39;, &#39;index.html&#39;);&#xA;  let html = fs.readFileSync(indexPath, &#39;utf8&#39;);&#xA;&#xA;  // OGP メタタグを組み立て&#xA;  const ogTags = `&#xA;    &lt;meta property=&#34;og:title&#34; content=&#34;${title}&#34; /&gt;&#xA;    &lt;meta property=&#34;og:description&#34; content=&#34;${description}&#34; /&gt;&#xA;    &lt;meta property=&#34;og:image&#34; content=&#34;${image}&#34; /&gt;&#xA;    &lt;meta property=&#34;og:url&#34; content=&#34;${url}&#34; /&gt;&#xA;  `;&#xA;&#xA;  // 任意のコメントなど、置き換え対象を探して埋め込む&#xA;  html = html.replace(&#39;&lt;!-- Index tag here --&gt;&#39;, ogTags);&#xA;&#xA;  res.setHeader(&#39;Content-Type&#39;, &#39;text/html; charset=utf-8&#39;);&#xA;  res.status(200).end(html);&#xA;};&#xA;```&#xA;&#xA;1. `axios` を使用してバックエンド (`https://example.com/api/v1/articles/:id`) から記事情報を取得  &#xA;2. データが正しく取得できたら、`index.html` を読み込み、コメント部分 (`&lt;!-- Index tag here --&gt;`) を OGP タグに置き換え  &#xA;3. それを `res.end()` でクライアント (または SNS クローラー) に返却  &#xA;&#xA;## 3. `index.html`&#xA;&#xA;```html&#xA;&lt;!DOCTYPE html&gt;&#xA;&lt;html lang=&#34;en&#34;&gt;&#xA;  &lt;head&gt;&#xA;    &lt;meta charset=&#34;UTF-8&#34; /&gt;&#xA;    &lt;title&gt;OGP Test&lt;/title&gt;&#xA;    &lt;!-- Index tag here --&gt;&#xA;  &lt;/head&gt;&#xA;  &lt;body&gt;&#xA;    &lt;div id=&#34;app&#34;&gt;&lt;/div&gt;&#xA;    &lt;script type=&#34;module&#34; src=&#34;/src/main.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;/body&gt;&#xA;&lt;/html&gt;&#xA;```&#xA;&#xA;- `&lt;head&gt;` 内に `&lt;!-- Index tag here --&gt;` のコメントを配置し、ここに OGP タグを差し込むイメージ&#xA;&#xA;---&#xA;&#xA;# 動作チェックに OpenGraph.xyz を使う&#xA;&#xA;デプロイしたアプリケーションが動作したら、[**OpenGraph.xyz**](https://www.opengraph.xyz/) にアクセスし、以下を確認してみてください。&#xA;&#xA;1. **URL を入力**して「Inspect」ボタンを押す  &#xA;2. もし OGP タグが正しく挿入されていれば、`og:title` や `og:image` の情報が表示され、プレビュー用の画像も表示されるはず  &#xA;3. エラーがある場合はそれが表示されるので、修正すべき点を特定しやすい&#xA;&#xA;---&#xA;&#xA;# まとめ&#xA;&#xA;1. **SPA では** JavaScript 実行後の結果がクローラーに届かないため、**サーバーサイドで OGP タグを動的に挿入**する必要がある  &#xA;2. **Vercel の Serverless Function** と Rewrite 設定を活用することで、ページごとに異なる OGP タグを差し込むことが可能  &#xA;3. 実装後は [**OpenGraph.xyz**](https://www.opengraph.xyz/) などで検証すると便利  &#xA;&#xA;SNS でリンクをシェアしたときに、**ページ固有のタイトル・画像・説明文**が正しく表示されるかどうかはユーザーの目を引くうえでとても大切です。  &#xA;ぜひ今回の方法を参考にしてみてください！</description>
      <author>Haruki Nakajima</author>
      <guid>72b93db9-3522-4058-adc5-686ee9e87a15</guid>
      <pubDate>Tue, 31 Dec 2024 03:20:21 +0000</pubDate>
    </item>
  </channel>
</rss>