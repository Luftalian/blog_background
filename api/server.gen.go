// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for GetArticlesParamsOrderby.
const (
	CreatedAt GetArticlesParamsOrderby = "created_at"
	ViewCount GetArticlesParamsOrderby = "view_count"
)

// Defines values for GetArticlesParamsOrder.
const (
	Asc  GetArticlesParamsOrder = "asc"
	Desc GetArticlesParamsOrder = "desc"
)

// ArchiveResponse defines model for ArchiveResponse.
type ArchiveResponse struct {
	Archive *map[string][]Article `json:"archive,omitempty"`
}

// Article defines model for Article.
type Article struct {
	Author    *string    `json:"author,omitempty"`
	AuthorId  *string    `json:"author_id,omitempty"`
	Category  *Category  `json:"category,omitempty"`
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
	ImageUrl  *string    `json:"image_url,omitempty"`
	LikeCount *int       `json:"like_count,omitempty"`
	Tags      *[]Tag     `json:"tags,omitempty"`
	Title     *string    `json:"title,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	ViewCount *int       `json:"view_count,omitempty"`
}

// ArticleByAuthor defines model for ArticleByAuthor.
type ArticleByAuthor struct {
	Articles *[]Article `json:"articles,omitempty"`
	Author   *string    `json:"author,omitempty"`
	AuthorId *string    `json:"author_id,omitempty"`
}

// ArticleResponse defines model for ArticleResponse.
type ArticleResponse struct {
	Articles  *[]Article `json:"articles,omitempty"`
	Condition *struct {
		Category *string `json:"category,omitempty"`
		Order    *string `json:"order,omitempty"`
		Orderby  *string `json:"orderby,omitempty"`
		Search   *string `json:"search,omitempty"`
		Tag      *string `json:"tag,omitempty"`
	} `json:"condition,omitempty"`
}

// Category defines model for Category.
type Category struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// Comment defines model for Comment.
type Comment struct {
	ArticleId *string    `json:"articleId,omitempty"`
	Author    *string    `json:"author,omitempty"`
	Content   *string    `json:"content,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Id        *string    `json:"id,omitempty"`
}

// ContactRequest defines model for ContactRequest.
type ContactRequest struct {
	Email   *openapi_types.Email `json:"email,omitempty"`
	Message *string              `json:"message,omitempty"`
	Name    *string              `json:"name,omitempty"`
}

// ContactResponse defines model for ContactResponse.
type ContactResponse struct {
	Message *string `json:"message,omitempty"`
}

// ErrorResponse エラーレスポンスの形式。
type ErrorResponse struct {
	// Code エラーコード。
	Code int32 `json:"code"`

	// Message エラーメッセージ。
	Message string `json:"message"`
}

// ImageUploadRequest 画像アップロード用のマルチパートフォームデータ。
type ImageUploadRequest struct {
	// Image アップロードする画像ファイル。
	Image openapi_types.File `json:"image"`
}

// ImageUploadResponse 画像アップロード成功時のレスポンス。
type ImageUploadResponse struct {
	// Url アップロードされた画像のURL。
	Url string `json:"url"`
}

// LikeRequest defines model for LikeRequest.
type LikeRequest struct {
	ArticleId string  `json:"articleId"`
	UserId    *string `json:"userId,omitempty"`
}

// LikeReturn defines model for LikeReturn.
type LikeReturn struct {
	ArticleId *string `json:"articleId,omitempty"`
	LikeCount *int    `json:"like_count,omitempty"`
	Liked     *bool   `json:"liked,omitempty"`
	UserId    *string `json:"userId,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// NewArticle defines model for NewArticle.
type NewArticle struct {
	Author   string    `json:"author"`
	AuthorId *string   `json:"author_id,omitempty"`
	Category string    `json:"category"`
	Content  string    `json:"content"`
	IsAdmin  bool      `json:"is_admin"`
	Tags     *[]string `json:"tags,omitempty"`
	Title    string    `json:"title"`
}

// NewComment defines model for NewComment.
type NewComment struct {
	ArticleId string  `json:"articleId"`
	Content   string  `json:"content"`
	UserId    *string `json:"userId,omitempty"`
	Username  string  `json:"username"`
}

// ProfileResponse defines model for ProfileResponse.
type ProfileResponse struct {
	// Bio Short biography
	Bio *string `json:"bio,omitempty"`

	// BlogPurpose Purpose of the blog
	BlogPurpose *string `json:"blogPurpose,omitempty"`

	// Hobbies List of hobbies
	Hobbies *[]string `json:"hobbies,omitempty"`

	// Name Full name of the profile owner
	Name *string `json:"name,omitempty"`

	// Photo URL of the profile photo
	Photo *string `json:"photo,omitempty"`

	// SocialLinks Social media or related links
	SocialLinks *map[string]string `json:"socialLinks,omitempty"`
}

// RSSFeed URL of the RSS feed
type RSSFeed = string

// RegisterUser defines model for RegisterUser.
type RegisterUser struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
	Username string              `json:"username"`
}

// Tag defines model for Tag.
type Tag struct {
	Id   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

// TagRequest defines model for TagRequest.
type TagRequest struct {
	ArticleId string `json:"article_id"`
	Tag       Tag    `json:"tag"`
}

// UpdateArticle defines model for UpdateArticle.
type UpdateArticle struct {
	AuthorId *string   `json:"author_id,omitempty"`
	Category *string   `json:"category,omitempty"`
	Content  *string   `json:"content,omitempty"`
	Tags     *[]string `json:"tags,omitempty"`
	Title    *string   `json:"title,omitempty"`
}

// UpdateComment defines model for UpdateComment.
type UpdateComment struct {
	Content *string `json:"content,omitempty"`
}

// GetArticlesParams defines parameters for GetArticles.
type GetArticlesParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Category Filter articles by category
	Category *string `form:"category,omitempty" json:"category,omitempty"`

	// Tag Filter articles by tag
	Tag *string `form:"tag,omitempty" json:"tag,omitempty"`

	// Search Search for articles by title or content
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Orderby Sort articles by created_at or view count (default created_at)
	Orderby *GetArticlesParamsOrderby `form:"orderby,omitempty" json:"orderby,omitempty"`

	// Order Sort articles by created_at or view count in ascending or descending order (default created_at desc)
	Order *GetArticlesParamsOrder `form:"order,omitempty" json:"order,omitempty"`
}

// GetArticlesParamsOrderby defines parameters for GetArticles.
type GetArticlesParamsOrderby string

// GetArticlesParamsOrder defines parameters for GetArticles.
type GetArticlesParamsOrder string

// GetCommentsParams defines parameters for GetComments.
type GetCommentsParams struct {
	ArticleId string `form:"articleId" json:"articleId"`
}

// GetLikesParams defines parameters for GetLikes.
type GetLikesParams struct {
	ArticleId string `form:"articleId" json:"articleId"`
}

// PostArticlesJSONRequestBody defines body for PostArticles for application/json ContentType.
type PostArticlesJSONRequestBody = NewArticle

// PatchArticlesIdJSONRequestBody defines body for PatchArticlesId for application/json ContentType.
type PatchArticlesIdJSONRequestBody = UpdateArticle

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRegisterJSONRequestBody defines body for PostAuthRegister for application/json ContentType.
type PostAuthRegisterJSONRequestBody = RegisterUser

// PostCategoriesJSONRequestBody defines body for PostCategories for application/json ContentType.
type PostCategoriesJSONRequestBody = Category

// PostCommentsJSONRequestBody defines body for PostComments for application/json ContentType.
type PostCommentsJSONRequestBody = NewComment

// PatchCommentsIdJSONRequestBody defines body for PatchCommentsId for application/json ContentType.
type PatchCommentsIdJSONRequestBody = UpdateComment

// PostContactJSONRequestBody defines body for PostContact for application/json ContentType.
type PostContactJSONRequestBody = ContactRequest

// UploadImageMultipartRequestBody defines body for UploadImage for multipart/form-data ContentType.
type UploadImageMultipartRequestBody = ImageUploadRequest

// PostLikesJSONRequestBody defines body for PostLikes for application/json ContentType.
type PostLikesJSONRequestBody = LikeRequest

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody = Tag

// PostTagsArticleIdJSONRequestBody defines body for PostTagsArticleId for application/json ContentType.
type PostTagsArticleIdJSONRequestBody = TagRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of articles
	// (GET /articles)
	GetArticles(ctx echo.Context, params GetArticlesParams) error
	// Create a new article
	// (POST /articles)
	PostArticles(ctx echo.Context) error
	// Get archive of articles
	// (GET /articles/archive)
	GetArticlesArchive(ctx echo.Context) error
	// Get articles by author
	// (GET /articles/author/{authorId})
	GetArticlesAuthorAuthorId(ctx echo.Context, authorId string) error
	// Delete an article
	// (DELETE /articles/{id})
	DeleteArticlesId(ctx echo.Context, id string) error
	// Get article details
	// (GET /articles/{id})
	GetArticlesId(ctx echo.Context, id string) error
	// Update an article
	// (PATCH /articles/{id})
	PatchArticlesId(ctx echo.Context, id string) error
	// Login
	// (POST /auth/login)
	PostAuthLogin(ctx echo.Context) error
	// Logout
	// (POST /auth/logout)
	PostAuthLogout(ctx echo.Context) error
	// Register a new user
	// (POST /auth/register)
	PostAuthRegister(ctx echo.Context) error
	// Get a list of categories
	// (GET /categories)
	GetCategories(ctx echo.Context) error
	// Create a new category
	// (POST /categories)
	PostCategories(ctx echo.Context) error
	// Get comments for an article
	// (GET /comments)
	GetComments(ctx echo.Context, params GetCommentsParams) error
	// Post a comment
	// (POST /comments)
	PostComments(ctx echo.Context) error
	// Delete a comment
	// (DELETE /comments/{id})
	DeleteCommentsId(ctx echo.Context, id string) error
	// Edit a comment
	// (PATCH /comments/{id})
	PatchCommentsId(ctx echo.Context, id string) error
	// Submit a contact message
	// (POST /contact)
	PostContact(ctx echo.Context) error
	// Upload an image
	// (POST /images/upload)
	UploadImage(ctx echo.Context) error
	// Get likes for an article
	// (GET /likes)
	GetLikes(ctx echo.Context, params GetLikesParams) error
	// Add a like to an article
	// (POST /likes)
	PostLikes(ctx echo.Context) error
	// Get profile information
	// (GET /profile)
	GetProfile(ctx echo.Context) error
	// Get RSS feed
	// (GET /rss)
	GetRss(ctx echo.Context) error
	// Get a list of tags
	// (GET /tags)
	GetTags(ctx echo.Context) error
	// Create a new tag
	// (POST /tags)
	PostTags(ctx echo.Context) error
	// Add tags to an article
	// (POST /tags/{articleId})
	PostTagsArticleId(ctx echo.Context, articleId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetArticles converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetArticlesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "category" -------------

	err = runtime.BindQueryParameter("form", true, false, "category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category: %s", err))
	}

	// ------------- Optional query parameter "tag" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag", ctx.QueryParams(), &params.Tag)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "orderby" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderby", ctx.QueryParams(), &params.Orderby)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderby: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArticles(ctx, params)
	return err
}

// PostArticles converts echo context to params.
func (w *ServerInterfaceWrapper) PostArticles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostArticles(ctx)
	return err
}

// GetArticlesArchive converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticlesArchive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArticlesArchive(ctx)
	return err
}

// GetArticlesAuthorAuthorId converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticlesAuthorAuthorId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "authorId" -------------
	var authorId string

	err = runtime.BindStyledParameterWithOptions("simple", "authorId", ctx.Param("authorId"), &authorId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter authorId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArticlesAuthorAuthorId(ctx, authorId)
	return err
}

// DeleteArticlesId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArticlesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteArticlesId(ctx, id)
	return err
}

// GetArticlesId converts echo context to params.
func (w *ServerInterfaceWrapper) GetArticlesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArticlesId(ctx, id)
	return err
}

// PatchArticlesId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchArticlesId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchArticlesId(ctx, id)
	return err
}

// PostAuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogin(ctx)
	return err
}

// PostAuthLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthLogout(ctx)
	return err
}

// PostAuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAuthRegister(ctx)
	return err
}

// GetCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategories(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategories(ctx)
	return err
}

// PostCategories converts echo context to params.
func (w *ServerInterfaceWrapper) PostCategories(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCategories(ctx)
	return err
}

// GetComments converts echo context to params.
func (w *ServerInterfaceWrapper) GetComments(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCommentsParams
	// ------------- Required query parameter "articleId" -------------

	err = runtime.BindQueryParameter("form", true, true, "articleId", ctx.QueryParams(), &params.ArticleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter articleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComments(ctx, params)
	return err
}

// PostComments converts echo context to params.
func (w *ServerInterfaceWrapper) PostComments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComments(ctx)
	return err
}

// DeleteCommentsId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCommentsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCommentsId(ctx, id)
	return err
}

// PatchCommentsId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCommentsId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCommentsId(ctx, id)
	return err
}

// PostContact converts echo context to params.
func (w *ServerInterfaceWrapper) PostContact(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostContact(ctx)
	return err
}

// UploadImage converts echo context to params.
func (w *ServerInterfaceWrapper) UploadImage(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UploadImage(ctx)
	return err
}

// GetLikes converts echo context to params.
func (w *ServerInterfaceWrapper) GetLikes(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLikesParams
	// ------------- Required query parameter "articleId" -------------

	err = runtime.BindQueryParameter("form", true, true, "articleId", ctx.QueryParams(), &params.ArticleId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter articleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLikes(ctx, params)
	return err
}

// PostLikes converts echo context to params.
func (w *ServerInterfaceWrapper) PostLikes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLikes(ctx)
	return err
}

// GetProfile converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfile(ctx)
	return err
}

// GetRss converts echo context to params.
func (w *ServerInterfaceWrapper) GetRss(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRss(ctx)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// PostTagsArticleId converts echo context to params.
func (w *ServerInterfaceWrapper) PostTagsArticleId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "articleId" -------------
	var articleId string

	err = runtime.BindStyledParameterWithOptions("simple", "articleId", ctx.Param("articleId"), &articleId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter articleId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTagsArticleId(ctx, articleId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/articles", wrapper.GetArticles)
	router.POST(baseURL+"/articles", wrapper.PostArticles)
	router.GET(baseURL+"/articles/archive", wrapper.GetArticlesArchive)
	router.GET(baseURL+"/articles/author/:authorId", wrapper.GetArticlesAuthorAuthorId)
	router.DELETE(baseURL+"/articles/:id", wrapper.DeleteArticlesId)
	router.GET(baseURL+"/articles/:id", wrapper.GetArticlesId)
	router.PATCH(baseURL+"/articles/:id", wrapper.PatchArticlesId)
	router.POST(baseURL+"/auth/login", wrapper.PostAuthLogin)
	router.POST(baseURL+"/auth/logout", wrapper.PostAuthLogout)
	router.POST(baseURL+"/auth/register", wrapper.PostAuthRegister)
	router.GET(baseURL+"/categories", wrapper.GetCategories)
	router.POST(baseURL+"/categories", wrapper.PostCategories)
	router.GET(baseURL+"/comments", wrapper.GetComments)
	router.POST(baseURL+"/comments", wrapper.PostComments)
	router.DELETE(baseURL+"/comments/:id", wrapper.DeleteCommentsId)
	router.PATCH(baseURL+"/comments/:id", wrapper.PatchCommentsId)
	router.POST(baseURL+"/contact", wrapper.PostContact)
	router.POST(baseURL+"/images/upload", wrapper.UploadImage)
	router.GET(baseURL+"/likes", wrapper.GetLikes)
	router.POST(baseURL+"/likes", wrapper.PostLikes)
	router.GET(baseURL+"/profile", wrapper.GetProfile)
	router.GET(baseURL+"/rss", wrapper.GetRss)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.POST(baseURL+"/tags/:articleId", wrapper.PostTagsArticleId)

}
